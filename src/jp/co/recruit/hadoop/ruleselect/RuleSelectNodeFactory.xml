<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 2.0//EN" "http://www.knime.org/Node.dtd">
<knimeNode icon="./ruleSelect.png" type="Manipulator">
    <name>RuleSelect</name>
    
    <shortDescription>
        Row Filter for structured files.
    </shortDescription>
    
    <fullDescription>
        <intro>RuleSelect is a Custom Built KNIME Node which takes a list of user-defined rules and tries to match them to each
        row in the input table. If a rule matches then the particular row is selected to the output row. 
        The rules follow a limited SQL-like syntax:
        <pre>
RULE := BEXPR '=&gt;' STRING
BEXPR := '(' BEXPR ')' |
         'NOT' BEXPR |
         'MISSING' COL |
         AEXPR (BINOP BEXPR)?
AEXPR := COL OP COL |
         NUMBER OP COL |
         COL OP NUMBER |
         STRING OP COL |
         COL OP STRING |
         COL LOP STRINGLIST
BOP := 'AND' | 'OR' | 'XOR'
OP := '&gt;' | '&lt;' | '&gt;=' | '&lt;=' | '=' | 'LIKE'
LOP := 'IN'
STRING := '&quot;' [^"]* '&quot;'
NUMBER := [1-9][0-9]*(\.[0-9]+)?
COL := '$' [^$]+ '$'
STRINGLIST := '(' STRING (',' STRING)* ')'
        </pre>
        <p>
	 	Rules consist of a condition part (antecedant), that must evaluate to <i>true</i>
        or <i>false</i>.
        The most simple rule is a comparison between a column and another column, a fixed number or string.
        The LIKE operator treats the fixed string as a wildcard pattern (with * and ?) as wilcards,
        the IN operator compares the column value to a list of strings and evaluates to <i>true</i> if at least
        one value in the list is equal to the column's value.
        </p>
        <p>
        Columns are given by their name surrounded by $, strings must always be surrounded by
        double quotes (thus it is currently not possible to enter strings that contain double quotes). Number
        are given in the usual decimal representation.
        </p>
        <p>Rules can (and should) be grouped with brackets because there is not pre-defined
        operator precedence for the boolean operators (comparison operators always take precedence
        over boolean operators).</p>
        <p>Some example rules:</p>
        <pre>
        $Col0$ > 5
        $Col0$ == "Active" AND $Col1" &lt;= 5
        $Col0$ LIKE "Market Street*" AND 
            ($Col1 IN ("married", "divorced") 
                OR $Col2$ > 40)       
        </pre>
		</intro>
        
        
        <option name="Variables">Available columns, which can be used as variables. Select one to add it to the rule editor field. </option>
        <option name="Operators">A list of valid operators. Select one to add it to the rule editor field. </option>
        <option name="Enter rule... ">The rule condition is created here. If a variable or an operator is selected it is inserted into the rule condition. </option>
        <option name="Add ">Click to save the rule. </option>
        <option name="Clear">Click to clear both fields, the rule editor and the outcome field. </option>
        <option name="Up">Click to move selected rule one up, as rules are evaluated from top to bottom, i.e. the outcome of the first rule that matches is used.</option>
        <option name="Down">Click to move selected rule one down, as rules are evaluated from top to bottom, i.e. the outcome of the first rule that matches is used. </option>
        <option name="Edit">Click to get the selected rule into the edit fields again. </option>
        <option name="Remove">Click to remove the selected rule. </option>
        
    </fullDescription>
    
    <ports>
        <inPort index="0" name="In-Port name">Any File Data Table</inPort>
        <!-- possibly more input ports here-->
        <outPort index="0" name="Out-Port name">File Data table same as input</outPort>
        <!-- possibly more output ports here-->
    </ports>    
    <views>
        <view index="0" name="name of first view">Select row according to the rule</view>
    </views>
</knimeNode>
